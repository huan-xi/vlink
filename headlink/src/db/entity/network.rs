//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

mod type_cidr;

use axum::Form;
use ip_network::Ipv4Network;
use sea_orm::entity::prelude::*;
use sea_orm::{ColIdx, TryGetable, TryGetError};
use serde::{Deserialize, Serialize};
use crate::db::entity::network::type_cidr::Ipv4NetworkWrapper;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "network"
    }
}


#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub network_id: i64,
    pub cidr: String,
    pub remark: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    NetworkId,
    Cidr,
    Remark,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    NetworkId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    NetworkToken
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::NetworkId => ColumnType::BigInteger.def(),
            Self::Cidr => ColumnType::Cidr.def(),
            Self::Remark => ColumnType::Text.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Relation::NetworkToken => {
                Entity::has_many(super::network_token::Entity).into()
            }
        }
    }
}

impl Related<super::network_token::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::NetworkToken.def()
    }
}


impl ActiveModelBehavior for ActiveModel {}
