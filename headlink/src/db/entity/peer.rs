//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "peer"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: i64,
    pub pub_key: String,
    pub ip: Option<String>,
    pub default_proto: Option<String>,
    pub endpoint_addr: Option<String>,
    pub port: Option<i32>,
    pub network_id: i64,
    pub disabled: bool,
    pub create_at: Option<DateTime>,
    pub update_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    PubKey,
    Ip,
    EndpointAddr,
    Port,
    DefaultProto,
    NetworkId,
    CreateAt,
    UpdateAt,
    Disabled,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::PubKey => ColumnType::Text.def().unique(),
            Self::Id => ColumnType::BigInteger.def().unique(),
            Self::Ip => ColumnType::Text.def().null(),
            Self::EndpointAddr => ColumnType::Text.def().null(),
            Self::DefaultProto => ColumnType::Text.def().null(),
            Self::Port => ColumnType::Integer.def().null(),
            Self::NetworkId => ColumnType::BigInteger.def(),
            Self::Disabled => ColumnType::Boolean.def(),
            Self::CreateAt => ColumnType::DateTime.def().null(),
            Self::UpdateAt => ColumnType::DateTime.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
