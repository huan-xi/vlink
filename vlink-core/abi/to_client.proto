syntax = "proto3";

package abi;


//客户端->服务端
message ToClient {
    // 通信id
    uint64 id = 1;
    oneof to_client_data {
        ToClientError error = 2;
        RespServerInfo resp_server_info = 3;
        RespHandshake resp_handshake = 4;
        RespConfig resp_config = 5;
        BcPeerEnter peer_enter = 6;
        BcPeerLevel peer_leave = 7;
        BcUpdateExtraEndpoint update_extra_endpoint = 10;


    }
}

message BcPeerLevel {
    string pub_key = 1;
}

message BcUpdateExtraEndpoint {
    string pub_key = 1;
    string proto = 2;
    string endpoint = 3;
}
message ToClientError {
    int32 code = 1;
    string msg = 2;
}
message RespServerInfo {
    string version = 1;
    // 服务端公钥
    string key = 2;
    optional string desc = 3;
}

/// 握手响应
message RespHandshake {
    bool success = 1;
    optional string msg = 4;
}

message ExtraTransport {
    string proto = 1;
    string params = 2;
}

/// 配置响应
message RespConfig {
    int64 network_id = 1;
    // 分配的网络地址
    uint32 address = 2;
    // 子网掩码
    uint32 mask = 3;
    uint32 network = 4;
    //udp 端口
    uint32 port = 5;

    optional string ipv6_addr = 6;
    repeated BcPeerEnter peers = 10;
    repeated ExtraTransport extra_transports = 11;
    repeated PeerExtraTransport peer_extra_transports = 12;
}
message PeerExtraTransport {
    string target_pub_key = 1;
    string proto = 2;
    string endpoint = 3;
    int32 index = 4;
}



enum ConType {
    CON_TYPE_UDP = 0;
}
enum ConnectionMode {
    /// 主动连接
    CONNECTION_MODE_ACTIVE = 0;
    /// 被动连接
    CONNECTION_MODE_PASSIVE = 1;
    /// 双向连接
    CONNECTION_MODE_BIDIRECTIONAL = 2;
    /// 禁止连接
    CONNECTION_MODE_NONE = 3;
}

message BcPeerEnter {
    string pub_key = 1;
    /// 网络中的ip
    string ip = 2;
    optional string endpoint_addr = 4;
    /// udp 端口
    uint32 port = 5;
    /// 上次连接类型
    optional ConType last_con_type = 6;
    /// 连接模式
    ConnectionMode mode = 7;
    bool is_online = 8;
}